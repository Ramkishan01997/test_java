import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

public class StreamSortExample {

    public static void main(String[] args) {

        // ===========================================
        // Example 1: Sorting a list of integers
        // ===========================================
        System.out.println("--- Sorting a list of Integers ---");

        // Create an unsorted list of integers.
        List<Integer> numbers = Arrays.asList(5, 2, 8, 1, 9, 3, 7, 4, 6);
        System.out.println("Original List: " + numbers);

        // Use the Stream API to sort the list in natural (ascending) order.
        // 1. numbers.stream(): Creates a stream from the list.
        // 2. .sorted(): Sorts the elements of the stream. For primitive wrappers like
        //    Integer, it uses the natural order.
        // 3. .collect(Collectors.toList()): Gathers the sorted elements back into a new List.
        List<Integer> sortedNumbers = numbers.stream()
                                             .sorted()
                                             .collect(Collectors.toList());

        System.out.println("Sorted List (Ascending): " + sortedNumbers);

        // Sorting in descending order using a custom comparator.
        List<Integer> sortedNumbersDesc = numbers.stream()
                                                 .sorted(Comparator.reverseOrder())
                                                 .collect(Collectors.toList());
        System.out.println("Sorted List (Descending): " + sortedNumbersDesc);


        // ===========================================
        // Example 2: Sorting a list of strings
        // ===========================================
        System.out.println("\n--- Sorting a list of Strings ---");

        // Create an unsorted list of strings.
        List<String> fruits = new ArrayList<>();
        fruits.add("Banana");
        fruits.add("Apple");
        fruits.add("Cherry");
        fruits.add("Date");
        System.out.println("Original List: " + fruits);

        // Sort the strings in natural (alphabetical) order.
        List<String> sortedFruits = fruits.stream()
                                          .sorted()
                                          .collect(Collectors.toList());
        System.out.println("Sorted List (Alphabetical): " + sortedFruits);

        // Sorting strings by length using a custom comparator.
        List<String> sortedFruitsByLength = fruits.stream()
                                                  .sorted(Comparator.comparingInt(String::length))
                                                  .collect(Collectors.toList());
        System.out.println("Sorted by Length: " + sortedFruitsByLength);
    }
}
